/**
 *
 * –°–∏–º–≤–æ–ª—å–Ω—ã–µ n-–≥—Ä–∞–º–º—ã
 *
 * –ë—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—å–Ω–æ–π n-–≥—Ä–∞–º–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ n –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 * –∏–¥—É—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–ª–æ–≤–µ –≤ —Ç–µ–∫—Å—Ç–µ. –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ n –ø–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ
 * —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π n-–≥—Ä–∞–º–º—ã –≤ —Ç–µ–∫—Å—Ç–µ.
 *
 * –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
 * –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞–Ω—ã –¥–≤–∞ —á–∏—Å–ª–∞: m ‚Äî —á–∏—Å–ª–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–æ—Ç 1 –¥–æ 100000) –∏
 * n ‚Äî –¥–ª–∏–Ω–∞ ùëõ n-–≥—Ä–∞–º–º—ã (–æ—Ç 1 –¥–æ 5). –î–∞–ª–µ–µ –∏–¥–µ—Ç ùëö m —Å–ª–æ–≤. –ú–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ
 * —Å–ª–æ–≤–∞ –æ—Ç–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫. –û–±—Ä–∞–±–æ—Ç–∫—É –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏
 * —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –ß–∏—Ç–∞–π—Ç–µ —Å–ª–æ–≤–∞ –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ std::cin >> word.
 *
 * –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 * –í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ n-–≥—Ä–∞–º–º—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã, –∞ –≤ —Å–ª—É—á–∞–µ —Ä–∞–≤–Ω—ã—Ö
 * —á–∞—Å—Ç–æ—Ç ‚Äî –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É). –î–ª—è –∫–∞–∂–¥–æ–π ùëõ n-–≥—Ä–∞–º–º—ã –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ
 * —Ç–∞–∫–∂–µ –µ—ë —á–∞—Å—Ç–æ—Ç—É (—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤ –ø—Ä–∏–º–µ—Ä–µ).
 */

#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <tuple>
#include <unordered_map>
#include <utility>
#include <vector>
int
main()
{
    size_t count, size;
    std::unordered_map<std::string, int> subwords;
    std::cin >> count >> size;
    for (size_t i = 0; i != count; ++i) {
        std::string word;
        std::cin >> word;
        for (size_t i = 0; word.size() >= size && i <= (word.size() - size);
             ++i) {
            subwords[word.substr(i, size)]++;
        }
    }
    std::vector<std::pair<std::string, int>> sortedByFreq(subwords.begin(),
                                                          subwords.end());
    std::sort(sortedByFreq.begin(),
              sortedByFreq.end(),
              [](const auto& p1, const auto& p2) {
                  return std::tie(p2.second, p1.first) <
                         std::tie(p1.second, p2.first);
              });
    for (const auto& [token, cnt] : sortedByFreq) {
        std::cout << token << " - " << cnt << std::endl;
    }
}
