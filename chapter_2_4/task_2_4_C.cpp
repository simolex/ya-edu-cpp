/**
 * –û–±—Ä–∞—Ç–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞
 *
 * –ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã n –≥–æ—Å—Ç–µ–π. –ò–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∑–∞–Ω—è—Ç—å –º–µ—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ n –≤ –∑–∞–ª–µ.
 * –ì–æ—Å—Ç–∏ –∑–∞–Ω–∏–º–∞—é—Ç —ç—Ç–∏ –º–µ—Å—Ç–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ò–∑–≤–µ—Å—Ç–Ω–æ, –Ω–∞ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ —Å–µ–ª –æ—á–µ—Ä–µ–¥–Ω–æ–π –≥–æ—Å—Ç—å.
 *
 * –í—ã–ø–∏—à–∏—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–æ–º–µ—Ä –≥–æ—Å—Ç—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –Ω–µ–≥–æ —Å–µ–ª.
 *
 * –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
 * –î–∞–Ω–æ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª ùëé1,ùëé2,...,ùëéùëõ  –æ—Ç 1 –¥–æ n.
 * –ß–∏—Å–ª–æ  a[k] ‚Äã‚Äî —ç—Ç–æ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–ª ùëò k-–π –≥–æ—Å—Ç—å. –ß–∏—Å–ª–æ n –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 20000.
 *
 * –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 * –í—ã–≤–µ–¥–∏—Ç–µ n —á–∏—Å–µ–ª b1‚Äã, b2‚Äã,..., bn‚Äã  –æ—Ç 1 –¥–æ n. –ß–∏—Å–ª–æ bk‚Äã  –¥–æ–ª–∂–Ω–æ –æ–±–æ–∑–Ω–∞—á–∞—Ç—å –Ω–æ–º–µ—Ä –≥–æ—Å—Ç—è, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–ª –Ω–∞ k-–µ –º–µ—Å—Ç–æ.
 */

#include <iostream>
#include <vector>
#include <algorithm>

int main()
{
    size_t n;
    int place;
    std::vector<std::pair<int, int>> places_guests;

    std::cin >> n;

    for (size_t i = 0; i < n; ++i)
    {
        std::cin >> place;
        places_guests.push_back({place, i + 1});
    }

    std::sort(places_guests.begin(), places_guests.end(), [](auto a, auto b)
              { return a.first < b.first; });

    for (size_t i = 0; i < n - 1; ++i)
    {
        std::cout << places_guests[i].second << " ";
    }
    std::cout << places_guests[n - 1].second << std::endl;
}
